#!/usr/bin/env bash

set -o pipefail

FILTERS="text|picture"
# More than N videos in a directory makes this a show
SHOW_THRESHOLD=3
VERBOSE=0
DRY=0
MEDIA_DIR=""
CHMOD_MODE=""
CHOWN_OWNER=""
VERSION="1.0.11"
IS_EPISODE_REGEX='(s|S)[0-9][0-9](e|E)[0-9][0-9]'

die() {
  [ "$1" ] && {
    echo "$1" >&2
    exit 1
  }
  cat > /dev/stdout <<EOF
${0} command [ options ] directory
  mediacat will try to infer the type the media directory is using simple heuristics and then apply options to this directory.

  commands:
    watch                  watch a directory for new sub directories to classify
    scan                   scan a directory for existing sub directories to classify
    single                 classify a single directory

  options:
    -h | --help            show help
    -v | --verbose         verbose
    -d | --dry             dry run, don't write any changes when used in conjunction with --mv option
    -t | --threshold <N>   the number of videos in a tree before it's considered a show. default: ${SHOW_THRESHOLD}
    -m | --mv <dir>        move directory to media directory under <category> sub directory
    --chmod <mode>         chmod (recursively) the newly moved directory
    --chown <owner:group>  chown (recursively) the newly moved directory

  example:
    # Watch the \`downloads\` directory for new media directories. 
    # Once one is categorized, its file mode bits are changed to 600
    # Its ownership is changed to user 1000, group 1000
    # And it is moved under the \`/media\` directory
    mediacat watch -v --chown 1000:1000 --chmod 600 -mv /media /downloads

EOF
  exit 0
}

trace() {
  [[ "$VERBOSE" == "1" ]] && {
    echo -e "\\033[93mtrace: \\033[97m$*\\033[39m"
  }
}

if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
  die
fi

COMMAND="$1"
COMMAND_RGX="watch|scan|single"
if [[ ! "$COMMAND" =~ $COMMAND_RGX ]]; then
  echo "Invalid command: $COMMAND" 2>&1
  die
fi
shift

while [[ "$#" -gt 0 ]]; do
  case "$1" in
    -d|--dry)
      DRY=1
      ;;
    -v|--verbose)
      VERBOSE=1
      ;;
    -m|--mv)
      MEDIA_DIR="$2"
      [ -R "$MEDIA_DIR" ] && die "missing media directory"
      shift
      ;;
    --chmod)
      CHMOD_MODE="$2"
      shift
      ;;
    --chown)
      CHOWN_OWNER="$2"
      shift
      ;;
    *)
      TARGET_DIR="$1"
      break
  esac
  shift
done
trace "VERSION : $VERSION"
trace "COMMAND : $COMMAND"
trace "MEDIA_DIR : $MEDIA_DIR"
trace "TARGET_DIR : $TARGET_DIR"

[ -R "$TARGET_DIR" ] && die

mediatype() {
  read -r ext
  case "$ext" in
    "mp4" | "mov" | "mkv") echo "video";;
    "jpg" | "jpeg" | "gif") echo "picture";;
    "mp3" | "m4b") echo "audio";;
    "pdf") echo "book";;
    *) echo "text"
  esac
}

walk() {
  local dir="${1:?}"
  if [ -d "$dir" ]; then
    for filename in "$dir"/*; do
      if [[ $(file "$filename" | awk '{print $NF}') != "directory" ]]; then
        echo "$filename" | awk -F '.' '{print $NF}' | mediatype
      else
        walk "$filename"
      fi
    done
  else
    echo "$dir" | awk -F '.' '{print $NF}' | mediatype
  fi
}

classify_by_exts() {
  read -r exts

  # Naive approach
  local mostfreq=$(echo "$exts" | \
    awk 'NR == 1 {print $2}')
  local count=$(echo "$exts" | \
    awk 'NR == 1 {print $1}')
  case "$mostfreq" in
    "video")
      if [ "$count" -gt "$SHOW_THRESHOLD" ]; then
        echo "show"
      else
        echo "movie"
      fi
      ;;
    "audio")
      echo "audiobook"
      ;;
    *)
      echo "$mostfreq"
      ;;
  esac
}

classify() {
  local target="${1:?}"
  walk "$target" | \
    sort | \
    uniq -c | \
    sort -r | \
    grep -vE "$FILTERS" | \
    classify_by_exts
}

do_chmod() {
  file="${1:?}"
  if [ "$CHMOD_MODE" != "" ]; then
    if [ "$DRY" == 1 ]; then
        echo chmod -v -R "$CHMOD_MODE" "$file"
    else
        chmod -v -R "$CHMOD_MODE" "$file"
    fi
  fi
}

do_chown() {
  file="${1:?}"
  if [ "$CHOWN_OWNER" != "" ]; then
    if [ "$DRY" == 1 ]; then
        echo chown -v -R "$CHOWN_OWNER" "$file"
    else
        chown -v -R "$CHOWN_OWNER" "$file"
    fi
  fi
}

show_name_from_file() {
  file="${1:?}"
  se=$(grep -oE "$IS_EPISODE_REGEX" <<< "$file")
  awk -F "$se" '{ print $1 }' <<< "$file" \
    | sed 's/\.//g' \
    | sed -e "s/\b\(.\)/\u\1/g" # uppercase first letter
}

mv_media() {
  local file="${1:?}"
  local class="${2:?}"
  trace "moving media file=$file class=$class"
  if [ "$DRY" == 1 ]; then
    echo mkdir -p "$MEDIA_DIR/${class}s"
    echo mv "$file" "$MEDIA_DIR/${class}s"
  else
    mkdir -p "$MEDIA_DIR/${class}s"
    mv "$file" "$MEDIA_DIR/${class}s"
  fi
  do_chmod "$MEDIA_DIR/${class}s/$(basename "$file")"
  do_chown "$MEDIA_DIR/${class}s/$(basename "$file")"
}

mv_media_episode() {
  file="${1:?}"
  season="${2:?}"
  episode="${3:?}"
  show_name=$(show_name_from_file $(basename "$file"))
  trace "moving media episode file=$file season=$season episode=$episode"
  if [ "$DRY" == 1 ]; then
    echo mkdir -p "$MEDIA_DIR/shows/$show_name/$season"
    echo mv "$file" "$MEDIA_DIR/shows/$show_name/$season/"
  else
    mkdir -p "$MEDIA_DIR/shows/$show_name/$season"
    mv "$file" "$MEDIA_DIR/shows/$show_name/$season/"
  fi
  do_chmod "$MEDIA_DIR/shows/$show_name/$season/$(basename "$file")"
  do_chown "$MEDIA_DIR/shows/$show_name/$season/$(basename "$file")"
}

season_from_file() {
  file="${1:?}"
  grep -oE '(s|S)[0-9][0-9]' <<< "$file" \
    | sed 's/s|S//g'
}

episode_from_file() {
  file="${1:?}"
  grep -oE '(e|E)[0-9][0-9]' <<< "$file" \
    | sed 's/e|E//g'
}

categorize() {
  file="${1:?}"
  class=$(classify "$file")
  trace "New file=$file with class=$class"
  if [[ "$class" == "" ]]; then
    trace "Failed to classify file=$file"
  elif [[ "$class" == "movie" ]] && [[ "$file" =~ $IS_EPISODE_REGEX ]]; then
    season=$(season_from_file "$file")
    episode=$(episode_from_file "$file")
    mv_media_episode "$file" "$season" "$episode"
  else
    mv_media "$file" "$class"
  fi
}

watch() {
  type inotifywait >/dev/null 2>&1 || {
    "Missing required package : inotifywait"
  }

  trace "Watching $TARGET_DIR"
  IFS=$'\n'
  inotifywait -m --format '%w%f' -e CREATE -e MOVED_TO "$TARGET_DIR" | \
    while read -r file; do
      categorize "$file"
    done
}

scan_single() {
  trace "Classifying single directory: $TARGET_DIR"
  class=$(classify "$TARGET_DIR")
  trace "class=$class"
  mv_media "$TARGET_DIR" "$class"
}

scan() {
  trace "Scanning"
  if [ -z "$(ls -A "$TARGET_DIR")" ]; then
    trace "Scan dir empty. Job's done."
  else
    IFS=$'\n'
    ls "$TARGET_DIR"
    for file in $(ls -1 "${TARGET_DIR}"); do
      categorize "$TARGET_DIR/$file"
    done
  fi
}

case "$COMMAND" in
  "watch")
    scan
    watch
    ;;
  "scan")
    scan
    ;;
  "single")
    scan_single
    ;;
  *)
    die "Invalid command: $COMMAND"
    ;;
esac

for file in *; do
  idx=$(awk '{print $5}' <<< "$file" | awk -F. '{print $1}');
  dirname=$(basename "$PWD" | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
  name="1984-$dirname-$idx.mp3"
  echo "$name"
  #cp "$file" "../$name"
done
